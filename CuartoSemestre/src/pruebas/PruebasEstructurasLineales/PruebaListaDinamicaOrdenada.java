package pruebas.PruebasEstructurasLineales;

import entradasalida.SalidaPorDefecto;
import enumerados.TipoOrden;
import enumerados.TipoTabla;
import estructuraslineales.ListaDinamicaOrdenada;
import estructuraslineales.ListaEstatica;
import estructurasnolineales.Matriz2;

public class PruebaListaDinamicaOrdenada {
    public static void main(String args[]){
        SalidaPorDefecto.consola("---Creando la lista Dinamica Ordenada orden Incremental---\n");
        ListaDinamicaOrdenada lista = new ListaDinamicaOrdenada(TipoOrden.INCR);
        SalidaPorDefecto.consola("Prueba agregar elemento Q: " + lista.agregar("Q") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento T: " + lista.agregar("T") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento S: " + lista.agregar("S") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento A: " + lista.agregar("A") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento C: " + lista.agregar("C") + "\n");
        SalidaPorDefecto.consola("Prueba imprimir lista en orden natural (Incremental): \n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba imprimir en orden inverso: \n");
        lista.imprimirOI();
        SalidaPorDefecto.consola("Prueba añadir un elemento al inicio (F): " + lista.agregarInicio("F")+"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Si se agrega un elemento mas, se vuelve a mantener el orden: \n");
        SalidaPorDefecto.consola("Agregando elemento H: " + lista.agregar("H") + "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba añadir un elemento al final (B): "+ lista.agregarFinal("B")+"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Si se agrega un elemento mas, se vuelve a mantener el orden: \n");
        SalidaPorDefecto.consola("Agregando elemento P: " + lista.agregar("P") + "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba eliminar elemento H: " + lista.eliminar("H") + "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba eliminar inicio: " + lista.eliminarInicio()+"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba eliminar final: " + lista.eliminar()+"\n");
        lista.imprimir();
        ListaEstatica listaAgregar = new ListaEstatica(4);
        listaAgregar.agregar("D");
        listaAgregar.agregar("J");
        listaAgregar.agregar("L");
        listaAgregar.agregar("V");
        SalidaPorDefecto.consola("arreglo a agregar: \n");
        listaAgregar.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba agregar arreglo: " + lista.agregarLista(listaAgregar) +"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba eliminar arreglo: \n");
        lista.eliminarLista(listaAgregar);
        lista.imprimir();
        Matriz2 matriz = new Matriz2(2,2);
        matriz.cambiar(0,0,"A");
        matriz.cambiar(0,1,"X");
        matriz.cambiar(1,0,"Y");
        matriz.cambiar(1,1,"Z");
        SalidaPorDefecto.consola("Matriz a agregar: \n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba agregar matriz: " + lista.agregarMatriz2D(matriz, TipoTabla.RENGLON)+"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("Prueba eliminar matriz: \n");
        lista.eliminarMatriz2D(matriz);
        lista.imprimir();
        SalidaPorDefecto.consola("\n \n");
        ListaDinamicaOrdenada decr = new ListaDinamicaOrdenada(TipoOrden.DECR);
        SalidaPorDefecto.consola("---Creando lista Dinamica Ordenada en orden Decremental---\n");
        SalidaPorDefecto.consola("Prueba agregar elemento Q: " + decr.agregar("Q") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento T: " + decr.agregar("T") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento S: " + decr.agregar("S") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento A: " + decr.agregar("A") + "\n");
        SalidaPorDefecto.consola("Prueba agregar elemento C: " + decr.agregar("C") + "\n");
        SalidaPorDefecto.consola("Imprimir en orden normal (Decremental):\n");
        decr.imprimir();
        SalidaPorDefecto.consola("Imprimir en orden inverso:\n");
        decr.imprimirOI();
        SalidaPorDefecto.consola("Prueba invertir lista: \n" );
        decr.invertir();
        SalidaPorDefecto.consola("Orden normal: \n");
        decr.imprimir();
        SalidaPorDefecto.consola("Orden inverso: \n");
        decr.imprimirOI();
    }
}
