package pruebas;

import entradasalida.SalidaPorDefecto;
import estructuraslineales.ListaEstatica;
import estructuraslineales.ListaEstaticaNumerica;

public class PruebaListaEstaticaNumerica {
    public static void main(String args[]){
        ListaEstaticaNumerica lista = new ListaEstaticaNumerica(6);
        SalidaPorDefecto.consola("Prueba agregando un String: "+ lista.agregar("A")+ "\n");
        SalidaPorDefecto.consola("Prueba agregando un numero: "+ lista.agregar(1.0)+ "\n");
        SalidaPorDefecto.consola("Prueba agregando un numero: "+ lista.agregar(2.40)+ "\n");
        SalidaPorDefecto.consola("Prueba agregando un booleano: "+ lista.agregar(false)+ "\n");
        SalidaPorDefecto.consola("Prueba agregando un nulo: "+ lista.agregar(null)+ "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba cambiar por cadena: " + lista.cambiar(1,"A")+ "\n");
        SalidaPorDefecto.consola("Prueba cambiar por numero: " + lista.cambiar(1,5.0)+ "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        lista.agregar(9);
        SalidaPorDefecto.consola("Prueba multiplicar escalar 5: "+ lista.porEscalar(5)+"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba sumar escalar 10: " + lista.sumarEscalar(10)+ "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        ListaEstaticaNumerica lista2 = new ListaEstaticaNumerica(5);
        lista2.agregar(1);
        lista2.agregar(2);
        lista2.agregar(3);
        SalidaPorDefecto.consola("Prueba sumando lista 2: "+ lista.sumar(lista2)+ "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba multiplicando lista 2: "+ lista.multiplicar(lista2)+ "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Vaciando lista... \n");
        lista.vaciar();
        lista.agregar(3.0);
        lista.agregar(5);
        lista.agregar(9);
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba aplicando potencia 3: " +lista.aplicarPotencia(3)+"\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Vaciando lista... \n");
        lista.vaciar();
        lista.agregar(3.0);
        lista.agregar(5);
        lista.agregar(9);
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba lista de potencias:(1,2,3) " + lista.aplicarPotencia(lista2) + "\n");
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Vaciando lista... \n");
        lista.vaciar();
        lista.agregar(3.0);
        lista.agregar(5);
        lista.agregar(9);
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba producto escalar lista2 (1,2,3): "+ lista.productoEscalar(lista2)+"\n");
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Vaciando lista... \n");
        lista.vaciar();
        lista.agregar(3.0);
        lista.agregar(5);
        lista.agregar(9);
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba norma: " + lista.norma()+ "\n");
        SalidaPorDefecto.consola("Prueba norma Euclidiana lista2 (1,2,3): "+ lista.normaEuclidiana(lista2)+"\n");
        ListaEstaticaNumerica vector1 = new ListaEstaticaNumerica(3);
        ListaEstaticaNumerica vector2 = new ListaEstaticaNumerica(3);
        vector1.agregar(2);
        vector1.agregar(2);
        vector1.agregar(4);
        vector2.agregar(2);
        vector2.agregar(6);
        vector2.agregar(9);
        ListaEstatica listas = new ListaEstatica(3);
        listas.agregar(vector1);
        listas.agregar(vector2);
        //SalidaPorDefecto.consola("Prueba sumar listas (lista de listas): "+lista.sumarListaEstatica(listas)+"\n");
        ListaEstaticaNumerica indices = new ListaEstaticaNumerica(3);
        indices.agregar(1);
        indices.agregar(0);
        SalidaPorDefecto.consola("Prueba sumar indices: "+ lista.sumarIndices(indices)+ "\n");
        SalidaPorDefecto.consola("Vaciando lista... \n");
        lista.vaciar();
        lista.agregar(3.0);
        lista.agregar(5);
        lista.agregar(9);
        lista.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Prueba creando sublista (0,1): \n" );
        ListaEstatica resultado = lista.subLista(indices);
        resultado.imprimir();
        SalidaPorDefecto.consola("\n");
        ListaEstaticaNumerica vector3 = new ListaEstaticaNumerica(2);
        ListaEstaticaNumerica vector4 = new ListaEstaticaNumerica(2);
        vector3.agregar(1);
        vector3.agregar(2);
        vector4.agregar(-2);
        vector4.agregar(1);
        SalidaPorDefecto.consola("Probando vectores ortogonales (1,2) (-2,1): "+ vector3.esOrtogonal(vector4) + "\n");
        SalidaPorDefecto.consola("Probando vectores paralelos (1,2) (-2,1): " + vector3.esParalelo(vector4) + "\n");
        ListaEstatica listaVectores = new ListaEstatica(2);
        listaVectores.agregar(vector3);
        listaVectores.agregar(vector4);
        ListaEstaticaNumerica vector5 = new ListaEstaticaNumerica(2);
        vector5.agregar(4);
        vector5.agregar(6);
        SalidaPorDefecto.consola("Prueba dependencia lineal (1,2) (-2,1) k(4,6):  " + vector5.sonLinealmenteDependientes(listaVectores) + "\n");
        SalidaPorDefecto.consola("Prueba independencia lineal (1,2) (-2,1) k(4,6):  " + vector5.sonLinealmenteIndependientes(listaVectores) + "\n");
    }
}
