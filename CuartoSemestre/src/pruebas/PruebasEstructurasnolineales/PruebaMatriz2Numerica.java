package pruebas.PruebasEstructurasnolineales;

import entradasalida.SalidaPorDefecto;
import enumerados.TipoLogaritmo;
import estructuraslineales.ListaEstatica;
import estructuraslineales.ListaEstaticaNumerica;
import estructurasnolineales.Matriz2Numerica;

public class PruebaMatriz2Numerica {
    public static void main(String args[]){
        SalidaPorDefecto.consola("...Creando nueva matriz numerica rellena de 5...: \n");
        Matriz2Numerica matriz = new Matriz2Numerica(4,4,5);
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("...Intentando crear una matriz con cadenas: \n");
        Matriz2Numerica matriz2 = new Matriz2Numerica(4,4,"A");
        matriz2.imprimirXRenglones();
        SalidaPorDefecto.consola("Queda vacia.\n");
        //matriz2 = matriz.clonar();
        SalidaPorDefecto.consola("Prueba cambiar elemento 2: \n");
        matriz.cambiar(1,1,2);
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba agregar matriz por columna: (Numerica):\n");
        matriz.agregarMatrizXColumna(matriz2);
        matriz.imprimirXRenglones();
        matriz2 = new Matriz2Numerica(4,4,"A");
        SalidaPorDefecto.consola("Prueba agregar matriz por columna: (Cadenas):\n");
        matriz.agregarMatrizXColumna(matriz2);
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba agregar renglon y columna (Numericos): \n");
        ListaEstatica renglon = new ListaEstatica(8);
        ListaEstatica columna = new ListaEstatica(5);
        renglon.agregar(2);
        renglon.agregar(2);
        renglon.agregar(2);
        renglon.agregar(2);
        renglon.agregar(2);
        renglon.agregar(2);
        renglon.agregar(2);
        renglon.agregar(2);
        columna.agregar(3);
        columna.agregar(3);
        columna.agregar(3);
        columna.agregar(3);
        columna.agregar(3);
        matriz.agregarRenglon(renglon);
        matriz.agregarColumna(columna);
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("----------------------------- \n");
        //Pruebas nuevas funcionalidades
        SalidaPorDefecto.consola("Prueba porEscalar 2: "+matriz.porEscalar(2)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba porEscalares: \n");
        matriz = new Matriz2Numerica(3,2,1);
        SalidaPorDefecto.consola("Matriz original: \n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Lista de escalares: \n");
        ListaEstaticaNumerica escalares = new ListaEstaticaNumerica(6);
        escalares.agregar(1);
        escalares.agregar(2);
        escalares.agregar(3);
        escalares.agregar(4);
        escalares.agregar(5);
        escalares.agregar(6);
        escalares.imprimir();
        SalidaPorDefecto.consola("\n");
        SalidaPorDefecto.consola("Multiplicado: \n");
        matriz.porEscalares(escalares);
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba sumar escalar 2: "+ matriz.sumarEscalar(2)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba sumar escalares: " + matriz.sumarEscalares(escalares)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Matriz a sumar y multiplicar: \n");
        matriz2 = new Matriz2Numerica(3,2,3);
        matriz2.imprimirXRenglones();
        //SalidaPorDefecto.consola("Prueba multiplicar matriz: " + matriz.Multiplicacion(matriz2)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba sumar matriz: "+matriz.sumar(matriz2)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba aplicar potencia 3: "+ matriz.aplicarPotencia(3)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Matriz para probar logaritmos: \n");
        matriz2 = new Matriz2Numerica(3,3,5);
        matriz2.imprimirXRenglones();
        matriz = new Matriz2Numerica(3,3,5);
        SalidaPorDefecto.consola("Prueba logaritmo base 2: "+matriz2.aplicarLogaritmo(TipoLogaritmo.BASE2)+"\n");
        matriz2.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba logaritmo base 10: "+matriz.aplicarLogaritmo(TipoLogaritmo.BASE10)+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba matriz diagonal (4): "+matriz.matrizDiagonal(4)+"\n");
        matriz.imprimirXRenglones();
        matriz.cambiar(2,0,1);
        matriz.cambiar(1,0,1);
        matriz.cambiar(2,1,1);
        SalidaPorDefecto.consola("Cambiando valores: \n");
        matriz.imprimirXRenglones();
        //SalidaPorDefecto.consola("Prueba es Triangular superior: "+ matriz.esTriangularSuperior()+"\n");
        //SalidaPorDefecto.consola("Prueba es Triangular inferior: "+ matriz.esTriangularInferior()+"\n");
        matriz = new Matriz2Numerica(3,3,5);
        matriz.cambiar(2,0,2);
        matriz.cambiar(1,0,1);
        SalidaPorDefecto.consola("Matriz a aplicar potencia: \n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba aplicar potencia de matriz 4: "+matriz.potencia(4)+"\n");
        matriz.imprimirXRenglones();
        matriz = new Matriz2Numerica(4,8,0);
        SalidaPorDefecto.consola("Matriz a doblar: \n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba doblar columnas: "+matriz.doblarColumnas()+"\n");
        matriz.imprimirXRenglones();
        SalidaPorDefecto.consola("Prueba doblar renglones: "+ matriz.doblarRenglones()+"\n");
        matriz.imprimirXRenglones();

    }
}
